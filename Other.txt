import pandas as pd

# Create a sample DataFrame
data = {
    'col1': [True, False, True, False],
    'col2': ['A', 'B', 'C', 'A']
}

df = pd.DataFrame(data)

# Identify boolean columns
boolean_columns = df.select_dtypes(include=['bool']).columns.tolist()

# Identify categorical columns (excluding boolean)
categorical_columns = df.select_dtypes(include=['object', 'category']).columns.tolist()
categorical_columns = [col for col in categorical_columns if col not in boolean_columns]

print("Boolean columns:", boolean_columns)
print("Categorical columns:", categorical_columns)


import pandas as pd

# Create a sample DataFrame
data = {
    'col1': [True, False, True, False],
    'col2': ['A', 'B', 'C', 'A']
}

df = pd.DataFrame(data)

# Identify boolean columns based on unique values
boolean_columns = []
for col in df.columns:
    unique_values = df[col].unique()
    if len(unique_values) == 2 and all(isinstance(val, bool) for val in unique_values):
        boolean_columns.append(col)

print("Boolean columns:", boolean_columns)



import pandas as pd

# Create a sample DataFrame
data = {
    'col1': ['True', 'False', 'True', 'False'],
    'col2': ['A', 'B', 'C', 'A']
}

df = pd.DataFrame(data)

# Identify boolean columns based on unique values
boolean_columns = []
for col in df.columns:
    unique_values = df[col].unique()
    if len(unique_values) == 2 and all(val in ['True', 'False'] for val in unique_values):
        boolean_columns.append(col)

# Identify categorical columns (excluding boolean)
categorical_columns = df.select_dtypes(include=['object', 'category']).columns.tolist()
categorical_columns = [col for col in categorical_columns if col not in boolean_columns]

print("Boolean columns:", boolean_columns)
print("Categorical columns:", categorical_columns)





def preprocess_data(data, important_features, categorical_features, boolean_features,
                    important_weightage=0.7, other_weightage=0.3):
    data.fillna(0, inplace=True)  # Replace missing values with 0 or customize
    
    important_data = data[important_features]
    
    # Handle categorical features with label encoding or one-hot encoding
    for feature in categorical_features:
        label_encoder = LabelEncoder()
        important_data[feature] = label_encoder.fit_transform(important_data[feature])
    
    # Handle boolean features by converting to 0 and 1
    for feature in boolean_features:
        important_data[feature] = important_data[feature].astype(int)
    
    other_data = data.drop(columns=important_features + categorical_features + boolean_features)
    
    # Handle categorical features in other_data
    for feature in other_data.select_dtypes(include=['object']).columns:
        label_encoder = LabelEncoder()
        other_data[feature] = label_encoder.fit_transform(other_data[feature])
    
    # Handle boolean features in other_data
    for feature in other_data.select_dtypes(include=['bool']).columns:
        other_data[feature] = other_data[feature].astype(int)
    
    combined_features = pd.concat([important_data, other_data], axis=1)
    
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(combined_features)
    
    weighted_data = (scaled_data[:, :len(important_features)] * important_weightage) + \
                    (scaled_data[:, len(important_features):] * other_weightage)
    
    return weighted_data




